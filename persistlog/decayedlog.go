package persistlog

import (
	"fmt"
	"github.com/lightningnetwork/lnd/channeldb"
	"sync"
	"time"
)

const (
	// defaultDbDirectory is the default directory where our decayed log
	// will store our (sharedHash, CLTV expiry height) key-value pairs.
	defaultDbDirectory = "sharedsecret"

	// sharedHashSize is the size in bytes of the keys we will be storing
	// in the DecayedLog. It represents the first 20 bytes of a truncated
	// sha-256 hash of a secret generated by ECDH.
	sharedHashSize = 20
)

var (
	// openChannelBucket is a bucket which stores all of the currently
	// open channels. It has a second, nested bucket which is keyed by
	// the Sha-256 hash of the shared secret used in the sphinx routing
	// protocol for a particular received HTLC.
	openChannelBucket = []byte("open-channel")

	// sharedHashBucket is a bucket which houses all the first sharedHashSize
	// bytes of a received HTLC's hashed shared secret and the HTLC's
	// expiry block height.
	sharedHashBucket = []byte("shared-hash")
)

// DecayedLog implements the PersistLog interface. It stores the first
// sharedHashSize bytes of a sha256-hashed shared secret along with a node's
// CLTV value. It is a decaying log meaning there will be a garbage collector
// to collect entries which are expired according to their stored CLTV value
// and the current block height. DecayedLog wraps channeldb for simplicity, but
// must batch writes to the database to decrease write contention.
type DecayedLog struct {
	db   *channeldb.DB
	wg   sync.WaitGroup
	quit chan (struct{})
}

// garbageCollector deletes entries from sharedHashBucket whose expiry height
// has already past. This function MUST be run as a goroutine.
func (d *DecayedLog) garbageCollector() error {
	defer d.wg.Done()

outer:
	for {
		select {
		case <-time.After(60 * time.Second):
			// TODO(eugene) logic here
		case <-d.quit:
			break outer
		}
	}

	return nil
}

// A compile time check to see if DecayedLog adheres to the PersistLog
// interface.
var _ PersistLog = (*DecayedLog)(nil)

// Delete ...
func (d *DecayedLog) Delete(hash []byte) error {
	// Create bucket if not exists.
	return nil
}

// Get ...
func (d *DecayedLog) Get(hash []byte) (uint32, error) {
	// Create bucket if not exists.
	return 0, nil
}

// Put ...
func (d *DecayedLog) Put(hash []byte, value uint32) error {
	// Create bucket if not exists.
	return nil
}

// Start ...
func (d *DecayedLog) Start() error {
	// Open the channeldb for use.
	var err error
	if d.db, err = channeldb.Open(defaultDbDirectory); err != nil {
		return fmt.Errorf("Could not open channeldb: %v", err)
	}

	// Start garbage collector.
	d.wg.Add(1)
	go d.garbageCollector()

	return nil
}

// Stop ...
func (d *DecayedLog) Stop() {
	// Stop garbage collector.
	close(d.quit)

	// Close channeldb.
	d.db.Close()
}
